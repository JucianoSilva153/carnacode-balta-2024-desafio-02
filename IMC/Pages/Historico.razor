@page "/historico"
@inject IJSRuntime jsRuntime

<div class="head">
    <div class="logo">
        <img src="icon-no-bg.png" alt="">
    </div>
    <h2>Historico</h2>
</div>
<div class="history">
    <div class="container">
        <input type="text" placeholder="Pesquisar...">
        @if (iMCs != null)
        {
            @foreach (var item in iMCs)
            {
                <div class="card">
                    <div class="cardLogo">
                        <div class="logo"></div>
                    </div>
                    <div class="cardContent">
                        <div class="cardHead">
                            <div class="title">@retornaCondicao(item.EnumClassicacaoIMC) ✅</div>
                            <div class="time">@CalcularDiferenca(item.DataDoCalculo)</div>
                        </div>
                        <div class="text">
                            <p>@retornaFraseMotivacional(item.EnumClassicacaoIMC)</p>
                        </div>
                    </div>
                </div>
            }

        }

    </div>
</div>

@code {
    List<CalculoIMC> iMCs = new List<CalculoIMC>();

    protected override async Task OnInitializedAsync()
    {
        await PegarListaIMC();
    }


    private async Task PegarListaIMC()
    {
        string json = await jsRuntime.InvokeAsync<string>("PegaLsitaImc");

        if (!string.IsNullOrEmpty(json))
        {
            iMCs = JsonSerializer.Deserialize<List<CalculoIMC>>(json);
        }
        else
        {
            iMCs = new List<CalculoIMC>();
        }
    }



    string retornaCondicao(EnumClassicacaoIMC enumClassicacaoIMC)
    {
        switch (enumClassicacaoIMC)
        {
            case EnumClassicacaoIMC.AbaixoDoPeso:
                return "Abaixo do peso";
            case EnumClassicacaoIMC.PesoNormal:
                return "Peso normal";
            case EnumClassicacaoIMC.SobrePeso:
                return "Sobre peso";
            case EnumClassicacaoIMC.Obesidade1:
                return "Obesidade I";
            case EnumClassicacaoIMC.Obesidade2:
                return "Obesidade II";
            case EnumClassicacaoIMC.Obesidade3:
                return "Obesidade III";
            default:
                return "";
        }
    }
    string retornaFraseMotivacional(EnumClassicacaoIMC enumClassicacaoIMC)
    {
        switch (enumClassicacaoIMC)
        {
            case EnumClassicacaoIMC.AbaixoDoPeso:
                return "Você é mais forte do que pensa. Lembre-se de cuidar bem do seu corpo para alcançar seu melhor estado de saúde";
            case EnumClassicacaoIMC.PesoNormal:
                return "Parabéns! Seu esforço em manter um peso saudável está dando resultados. Continue se alimentando bem e se exercitando regularmente";
            case EnumClassicacaoIMC.SobrePeso:
                return "Você é capaz de alcançar seus objetivos de saúde. Pequenas mudanças podem fazer uma grande diferença. Estou aqui para apoiá-lo.";
            case EnumClassicacaoIMC.Obesidade1:
                return "Você não está sozinho nessa jornada. Com determinação e apoio, você pode superar esse desafio. Estou aqui para ajudar";
            case EnumClassicacaoIMC.Obesidade2:
                return "Você está no caminho certo para alcançar uma saúde melhor. Cada pequena vitória importa. Mantenha-se firme em seu compromisso consigo mesmo";
            case EnumClassicacaoIMC.Obesidade3:
                return "Você tem a força e a determinação para transformar sua saúde. Peça ajuda quando precisar e lembre-se de que cada passo conta";
            default:
                return "";
        }
    }

     string CalcularDiferenca(DateTime dt)
    {
        TimeSpan diff = DateTime.Now - dt;

        if (diff.TotalSeconds < 60)
        {
            return $"{diff.TotalSeconds}s atrás";
        }
        else if (diff.TotalMinutes < 60)
        {
            return $"{diff.TotalMinutes}m atrás";
        }
        else
        {
            return $"{diff.TotalHours}h atrás";
        }
    }

}